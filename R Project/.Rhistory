library(boot, lib.loc = "C:/Program Files/R/R-4.3.3/library")
detach("package:boot", unload = TRUE)
install.packages(c("ggplot2", "DepLogo"))
sessioninfo(
)
sessionInfo()
# Load necessary libraries
library(ggplot2)
library(MASS)
# Load the dataset
data <- read.csv("house_prices_data.csv")
install.packages(c("ggplot2", "MASS"))
install.packages("xlsx")
install.packages("xlsx")
library(xlsx)
library(xlsx)
library("xlsx")
any(grepl("xlsx",installed.packages()))
install.packages("dplyr")
any(grepl("dplyr",installed.packages()))
install.packages("graphics")
getwd()
setwd("C:\\Users\\sucha\\Downloads\\R Project")
library("readxl")
library("dplyr")
library("xlsx")
library("magrittr")
library("ggplot2")
data <- read.csv("dataset_prob_stat.csv")
datar <- data
str(datar) #Structure of the data frame
summary(datar)
# Descriptive statistics
desc_stats <- summarise_all(datar, list(mean = mean, sd = sd, min = min, max = max))
print(desc_stats)
# Calculate trimmed mean for price variable
trimmed_mean_price <- mean(datar$price, trim = 0.05)  # Adjust trim percentage as needed
cat("Trimmed mean price:", trimmed_mean_price, "\n")
# Create histograms for price, square footage, bedrooms, and baths
hist_price <- ggplot(datar, aes(x = price)) +
geom_histogram(binwidth = 50000, fill = "skyblue", color = "black") +
labs(title = "Distribution of House Prices",
x = "Price (USD)",
y = "Frequency") +
theme_minimal()
hist_sqft <- ggplot(datar, aes(x = sqft)) +
geom_histogram(binwidth = 200, fill = "skyblue", color = "black") +
labs(title = "Distribution of Square Footage",
x = "Square Footage",
y = "Frequency") +
theme_minimal()
hist_bedrooms <- ggplot(datar, aes(x = bedrooms)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Distribution of Bedrooms",
x = "Number of Bedrooms",
y = "Frequency") +
theme_minimal()
hist_baths <- ggplot(datar, aes(x = baths)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Distribution of Bathrooms",
x = "Number of Bathrooms",
y = "Frequency") +
theme_minimal()
# Display the plots
hist_price
hist_sqft
hist_bedrooms
hist_baths
# Calculate the correlation matrix
correlation_matrix <- cor(datar)
# Visualize the correlation matrix using a heatmap
library(ggplot2)
library(reshape2)
correlation_heatmap <- ggplot(data = melt(correlation_matrix), aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab", name="Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1)) +
coord_fixed()
# Display the heatmap
correlation_heatmap
# Probability of a house having a pool
prob_pool <- mean(datar$pool == 1)
cat("Probability of a house having a pool:", prob_pool, "\n")
# Conditional probability of having a fireplace given a pool
prob_fireplace_given_pool <- mean(datar$fireplace[datar$pool == 1] == 1)
cat("Conditional probability of having a fireplace given a pool:", prob_fireplace_given_pool, "\n")
# Number of trials (houses chosen)
n_trials <- 10
# Probability of a house having a pool
prob_pool <- mean(datar$pool == 1)
# Probability of at least 3 houses having a pool out of 10
prob_at_least_3_pool <- sum(dbinom(3:n_trials, size = n_trials, prob = prob_pool))
cat("Probability of at least 3 houses having a pool out of 10:", prob_at_least_3_pool, "\n")
# Sample size
n <- nrow(datar)
# Sample mean
mean_price <- mean(datar$price)
# Sample standard deviation
std_dev <- sd(datar$price)
# Degrees of freedom
df <- n - 1
# t-value for 95% confidence level (two-tailed test)
t_value <- qt(0.975, df)
# Standard error of the mean
std_error <- std_dev / sqrt(n)
# Margin of error
margin_error <- t_value * std_error
# Confidence interval
lower_bound <- mean_price - margin_error
upper_bound <- mean_price + margin_error
# Print the confidence interval
cat("95% Confidence Interval on the mean house price:", lower_bound, "-", upper_bound, "\n")
# Load necessary libraries
library(ggplot2)
library(caret)
# Set seed for reproducibility
set.seed(123)
# Split the data into training and testing sets
train_index <- createDataPartition(datar$price, p = 0.8, list = FALSE)
train_data <- datar[train_index, ]
test_data <- datar[-train_index, ]
# Predict house prices on the training set
train_data$predicted_price <- exp(predict(model, newdata = train_data))
# Predict house prices on the test set
test_data$predicted_price <- exp(predict(model, newdata = test_data))
# Split the data into training and testing sets
train_index <- createDataPartition(datar$price, p = 0.8, list = FALSE)
train_data <- datar[train_index, ]
test_data <- datar[-train_index, ]
# Perform simple linear regression
model <- lm(log(price) ~ log(sqft), data = datar)
# Print the fitted model
summary(model)
# Scatter plot with data and fitted model
scatter_plot <- ggplot(data = datar, aes(x = log(sqft), y = log(price))) +
geom_point(color = "yellow", aes(shape = "Data")) +  # Data points in yellow
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "red", aes(shape = "Fitted Model")) +  # Fitted model in red
labs(title = "Scatter Plot of House Prices vs. Square Footage",
x = "Ln(Square Footage)",
y = "Ln(Price)",
shape = "Legend") +
theme_minimal() +
scale_shape_manual(values = c(16, 17), labels = c("Data", "Fitted Model"))
scatter_plot <- ggplot(data = datar, aes(x = log(sqft), y = log(price))) +
geom_point(color = "yellow", aes(shape = "Data")) +  # Data points in yellow
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "red", aes(shape = "Fitted Model")) +  # Fitted model in red
labs(title = "Scatter Plot of House Prices vs. Square Footage",
x = "Ln(Square Footage)",
y = "Ln(Price)",
shape = "Legend") +
theme_minimal() +
scale_shape_manual(values = c(16, 17), labels = c("Data", "Fitted Model"))
scatter_plot
ggplot(datar, aes(x = log(sqft), y = log(price))) +
geom_point(color = "yellow") +  # Yellow points for data
geom_smooth(method = "lm", formula = y ~ x, color = "red") +  # Fitted model in red
labs(title = "Scatter Plot with Fitted Model",
x = "Log(Square Footage)",
y = "Log(Price)") +
theme_minimal() +
theme(legend.position = "top", legend.title = element_blank(),
legend.background = element_rect(fill = "white", color = "black"))
# Calculate residuals
datar$residuals <- resid(model)
# Plot of residuals
ggplot(datar, aes(x = log(sqft), y = residuals)) +
geom_point(color = "blue") +  # Blue points for residuals
geom_hline(yintercept = 0, color = "red") +  # Reference line for zero residuals
labs(title = "Residual Plot",
x = "Log(Square Footage)",
y = "Residuals") +
theme_minimal() +
theme(legend.position = "none")
# Scatter plot with data and fitted model
ggplot(datar, aes(x = log(sqft), y = log(price))) +
geom_point(color = "yellow", aes(fill = "Data"), shape = 16) +  # Yellow points for data
geom_smooth(method = "lm", formula = y ~ x, color = "red", aes(fill = "Fitted Model")) +  # Fitted model in red
labs(title = "Scatter Plot with Fitted Model",
x = "Log(Square Footage)",
y = "Log(Price)",
fill = "") +
scale_fill_manual(values = c("Data" = "yellow", "Fitted Model" = "red")) +
theme_minimal()
# Calculate residuals
datar$residuals <- resid(model)
# Plot of residuals
ggplot(datar, aes(x = log(sqft), y = residuals)) +
geom_point(color = "blue", aes(fill = "Residuals"), shape = 16) +  # Blue points for residuals
geom_hline(yintercept = 0, color = "red") +  # Reference line for zero residuals
labs(title = "Residual Plot",
x = "Log(Square Footage)",
y = "Residuals",
fill = "") +
scale_fill_manual(values = c("Residuals" = "blue")) +
theme_minimal() +
theme(legend.position = "top")
ggplot(datar, aes(x = log(sqft), y = log(price))) +
geom_point(color = "yellow", aes(fill = "Data"), shape = 16) +  # Yellow points for data
geom_smooth(method = "lm", formula = y ~ x, color = "red", aes(fill = "Fitted Model")) +  # Fitted model in red
labs(title = "Scatter Plot with Data and Fitted Model",
x = "Log(Square Footage)",
y = "Log(Price)",
fill = "") +
scale_fill_manual(values = c("Data" = "yellow", "Fitted Model" = "red")) +
theme_minimal()
# Calculate residuals
datar$residuals <- resid(model)
# Plot of residuals
ggplot(datar, aes(x = log(sqft), y = residuals)) +
geom_point(color = "blue", aes(fill = "Residuals"), shape = 16) +  # Blue points for residuals
geom_hline(yintercept = 0, color = "red") +  # Reference line for zero residuals
labs(title = "Residual Plot",
x = "Log(Square Footage)",
y = "Residuals",
fill = "") +
scale_fill_manual(values = c("Residuals" = "blue")) +
theme_minimal() +
theme(legend.position = "top")
# Plot of residuals
ggplot(datar, aes(x = log(sqft), y = residuals)) +
geom_point(color = "blue", aes(fill = "Residuals"), shape = 16) +  # Blue points for residuals
geom_hline(yintercept = 0, color = "red") +  # Reference line for zero residuals
labs(title = "Residual Plot",
x = "Log(Square Footage)",
y = "Residuals",
fill = "") +
scale_fill_manual(values = c("Residuals" = "blue", "Data" = "yellow")) + # Adding legend for data
theme_minimal() +
theme(legend.position = "top")
# Plot of residuals
ggplot(datar, aes(x = log(sqft), y = residuals)) +
geom_point(color = "blue", aes(fill = "Residuals"), shape = 16) +  # Blue points for residuals
geom_hline(yintercept = 0, color = "red") +  # Reference line for zero residuals
labs(title = "Residual Plot",
x = "Log(Square Footage)",
y = "Residuals",
fill = "") +
scale_fill_manual(values = c("Residuals" = "blue", "Data" = "yellow")) + # Adding legend for data
theme_minimal() +
theme(legend.position = "top")
# Scatter plot with data and fitted model
ggplot(datar, aes(x = log(sqft), y = log(price))) +
geom_point(color = "yellow", aes(fill = "Data"), shape = 16) +  # Yellow points for data
geom_smooth(method = "lm", formula = y ~ x, color = "red", aes(fill = "Fitted Model")) +  # Fitted model in red
labs(title = "Scatter Plot with Data and Fitted Model",
x = "Log(Square Footage)",
y = "Log(Price)",
fill = "") +
scale_fill_manual(values = c("Data" = "yellow", "Fitted Model" = "red")) +
theme_minimal()
datar$residuals <- resid(model)
# Plot of residuals
ggplot(datar, aes(x = log(sqft), y = residuals)) +
geom_point(color = "blue", aes(fill = "Residuals"), shape = 16) +  # Blue points for residuals
geom_hline(yintercept = 0, color = "red") +  # Reference line for zero residuals
labs(title = "Residual Plot",
x = "Log(Square Footage)",
y = "Residuals",
fill = "") +
scale_fill_manual(values = c("Residuals" = "blue", "Data" = "yellow")) + # Adding legend for data
theme_minimal() +
theme(legend.position = "top")
# Calculate residuals
datar$residuals <- resid(model)
# Plot of residuals
ggplot(datar, aes(x = log(sqft), y = residuals)) +
geom_point(color = "blue", shape = 16) +  # Blue points for residuals
geom_hline(yintercept = 0, color = "red") +  # Reference line for zero residuals
labs(title = "Residual Plot",
x = "Log(Square Footage)",
y = "Residuals") +
annotate("text", x = max(log(datar$sqft)), y = max(datar$residuals), label = "Residuals", color = "blue", hjust = 1, vjust = 1) +
theme_minimal()
# Calculate residuals
datar$residuals <- resid(model)
# Plot of residuals
ggplot(datar, aes(x = log(sqft), y = residuals)) +
geom_point(color = "blue", shape = 16) +  # Blue points for residuals
geom_hline(yintercept = 0, color = "red") +  # Reference line for zero residuals
labs(title = "Residual Plot",
x = "Log(Square Footage)",
y = "Residuals") +
annotate("text", x = max(log(datar$sqft)), y = max(datar$residuals), label = "Residuals", color = "blue", hjust = 1, vjust = 1) +
annotate("text", x = max(log(datar$sqft)), y = 0, label = "Zero Residuals", color = "red", hjust = 1, vjust = 1) +
theme_minimal()
# Perform multiple linear regression of ln(price) against all predictor variables
full_model <- lm(log(price) ~ log(sqft) + bedrooms + baths + pool + fireplace, data = datar)
# Print the summary of the full model
summary(full_model)
# Perform feature selection (backward elimination) for reduced model
reduced_model <- step(full_model)
# Print the summary of the reduced model
summary(reduced_model)
# Load necessary library for cross-validation
library(caret)
# Define the control parameters for k-fold cross-validation
ctrl <- trainControl(method = "cv", number = 10)  # 10-fold cross-validation
# Perform k-fold cross-validation for the full model
full_cv <- train(log(price) ~ log(sqft) + bedrooms + baths + pool + fireplace, data = datar, method = "lm", trControl = ctrl)
# Perform k-fold cross-validation for the reduced model
reduced_cv <- train(log(price) ~ log(sqft) + baths + pool, data = datar, method = "lm", trControl = ctrl)
# Compare model performances
print(full_cv)
print(reduced_cv)
# Subset data for houses on waterfront and not on waterfront
waterfront <- datar$price[datar$waterfront == 1]
non_waterfront <- datar$price[datar$waterfront == 0]
# Perform two-sample t-test
t_test <- t.test(waterfront, non_waterfront, alternative = "greater")
# Print test results
print(t_test)
# Create contingency table
contingency_table <- table(datar$pool, datar$fireplace)
# Add row and column names
rownames(contingency_table) <- c("No Pool", "Pool")
colnames(contingency_table) <- c("No Fireplace", "Fireplace")
# Print contingency table
print(contingency_table)
# Perform chi-squared test for independence
chi_squared_test <- chisq.test(datar$pool, datar$fireplace)
# Print test results
print(chi_squared_test)
